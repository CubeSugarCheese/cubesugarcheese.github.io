<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 方糖的博客</title><link>https://cubesugarcheese.github.io/post/</link><description>Recent content in Posts on 方糖的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://cubesugarcheese.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>你好 世界</title><link>https://cubesugarcheese.github.io/p/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cubesugarcheese.github.io/p/hello-world/</guid><description>&lt;img src="https://cubesugarcheese.github.io/p/hello-world/cover.jpg" alt="Featured image of post 你好 世界" />&lt;p>这里是正文内容&lt;/p>
&lt;h1 id="markdown">markdown&lt;/h1>
&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1&lt;/h1>
&lt;h2 id="h2">H2&lt;/h2>
&lt;h3 id="h3">H3&lt;/h3>
&lt;h4 id="h4">H4&lt;/h4>
&lt;h5 id="h5">H5&lt;/h5>
&lt;h6 id="h6">H6&lt;/h6>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h3 id="blockquote-without-attribution">Blockquote without attribution&lt;/h3>
&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h3 id="blockquote-with-attribution">Blockquote with attribution&lt;/h3>
&lt;blockquote>
&lt;p>Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br>
— &lt;cite>Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="inline-markdown-within-tables">Inline Markdown within tables&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;th>C&lt;/th>
&lt;th>D&lt;/th>
&lt;th>E&lt;/th>
&lt;th>F&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td>
&lt;td>Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td>
&lt;td>Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td>
&lt;td>Proin sit amet velit nec enim imperdiet vehicula.&lt;/td>
&lt;td>Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td>
&lt;td>Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks&lt;/h2>
&lt;h3 id="code-block-with-backticks">Code block with backticks&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="code-block-indented-with-four-spaces">Code block indented with four spaces&lt;/h3>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="diff-code-block">Diff code block&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">[dependencies.bevy]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git = &amp;#34;https://github.com/bevyengine/bevy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rev = &amp;#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- features = [&amp;#34;dynamic&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ features = [&amp;#34;jpeg&amp;#34;, &amp;#34;dynamic&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="one-line-code-block">One line code block&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>A paragraph&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h3 id="ordered-list">Ordered List&lt;/h3>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h3 id="unordered-list">Unordered List&lt;/h3>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h3 id="nested-list">Nested list&lt;/h3>
&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark&lt;/h2>
&lt;p>&lt;abbr title="Graphics Interchange Format">GIF&lt;/abbr> is a bitmap image format.&lt;/p>
&lt;p>H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>Press &lt;kbd>CTRL&lt;/kbd> + &lt;kbd>ALT&lt;/kbd> + &lt;kbd>Delete&lt;/kbd> to end the session.&lt;/p>
&lt;p>Most &lt;mark>salamanders&lt;/mark> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;h1 id="短代码">短代码&lt;/h1>
&lt;p>For more details, check out the &lt;a class="link" href="https://stack.jimmycai.com/writing/shortcodes" target="_blank" rel="noopener"
>documentation&lt;/a>.&lt;/p>
&lt;h2 id="bilibili-video">Bilibili video&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe src="https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1d4411N7zD"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="tencent-video">Tencent video&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe src="https://v.qq.com/txp/iframe/player.html?vid=g0014r3khdw&amp;auto=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="youtube-video">YouTube video&lt;/h2>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/0qwALOOvUik"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="generic-video-file">Generic video file&lt;/h2>
&lt;div class="video-wrapper">
&lt;video
controls
src="https://www.w3schools.com/tags/movie.mp4"
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="https://www.w3schools.com/tags/movie.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;h2 id="gist">Gist&lt;/h2>
&lt;script type="application/javascript" src="https://gist.github.com/CaiJimmy/e2751a943de10b2a5b3a8a6c2120cb86.js">&lt;/script>
&lt;h2 id="gitlab">GitLab&lt;/h2>
&lt;script
type="application/javascript"
src="https://gitlab.com/-/snippets/2589724.js"
>&lt;/script>
&lt;h2 id="quote">Quote&lt;/h2>
&lt;blockquote>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p>&lt;span class="cite">&lt;span>― &lt;/span>&lt;span>A famous person, &lt;/span>&lt;a href="https://en.wikipedia.org/wiki/Book">&lt;cite>The book they wrote&lt;/cite>&lt;/a>&lt;/span>&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@codioful" target="_blank" rel="noopener"
>Codioful&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/WDSN62Qdxuk" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="数学公式">数学公式&lt;/h1>
&lt;p>Stack has built-in support for math typesetting using &lt;a class="link" href="https://katex.org/" target="_blank" rel="noopener"
>KaTeX&lt;/a>.&lt;/p>
&lt;p>&lt;strong>It&amp;rsquo;s not enabled by default side-wide,&lt;/strong> but you can enable it for individual posts by adding &lt;code>math: true&lt;/code> to the front matter. Or you can enable it side-wide by adding &lt;code>math = true&lt;/code> to the &lt;code>params.article&lt;/code> section in &lt;code>config.toml&lt;/code>.&lt;/p>
&lt;h2 id="inline-math">Inline math&lt;/h2>
&lt;p>This is an inline mathematical expression: $\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$\varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887…$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="block-math">Block math&lt;/h2>
&lt;p>$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>$$
f(x) = \int_{-\infty}^\infty\hat f(\xi),e^{2 \pi i \xi x},d\xi
$$&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class="link" href="https://www.youtube.com/watch?v=PAAkCSZUG1c" target="_blank" rel="noopener"
>talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>为什么是 LSP ？</title><link>https://cubesugarcheese.github.io/p/why-lsp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cubesugarcheese.github.io/p/why-lsp/</guid><description>&lt;p>LSP (&lt;a class="link" href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noopener"
>language server protocol&lt;/a>) 在今天十分流行。
至于为什么会出现这种情况，有一个标准解释。你可能见过这张图片：&lt;/p>
&lt;p>&lt;img src="https://cubesugarcheese.github.io/p/why-lsp/LSP-MxN.png"
width="1162"
height="538"
srcset="https://cubesugarcheese.github.io/p/why-lsp/LSP-MxN_huf4af7a5c61e6194adc0c9f9cc9452971_71365_480x0_resize_box_3.png 480w, https://cubesugarcheese.github.io/p/why-lsp/LSP-MxN_huf4af7a5c61e6194adc0c9f9cc9452971_71365_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="LSP-MxN"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="518px"
>&lt;/p>
&lt;p>我认为这种对 LSP 受欢迎程度的标准解释是错误的。在这篇文章中，我提出了一个替代图片。&lt;/p>
&lt;h1 id="标准解释">标准解释&lt;/h1>
&lt;p>解释如下：&lt;/p>
&lt;p>首先，有 &lt;code>M&lt;/code> 个编辑器和 &lt;code>N&lt;/code> 种语言。如果你想在特定的编辑器中支持特定的语言，需要为此编写一个专用的插件。
这意味着要做 &lt;code>M * N&lt;/code> 的工作，正如图片的左边生动地展示的那样。
LSP 所做的是通过提供一个常见的细腰&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>将其削减为 &lt;code>M + N&lt;/code>，如图片右侧所示。&lt;/p>
&lt;h1 id="为什么这个解释错了">为什么这个解释错了？&lt;/h1>
&lt;p>我们最好用图片来说明这个解释的问题。简而言之，上面的图片没有按比例绘制。
这里有一个更好的说明，以 &lt;code>rust-analyzer&lt;/code> + &lt;code>VS Code&lt;/code> 的组合是如何协同工作为例：&lt;/p>
&lt;p>&lt;img src="https://cubesugarcheese.github.io/p/why-lsp/ra-code.png"
width="1057"
height="538"
srcset="https://cubesugarcheese.github.io/p/why-lsp/ra-code_huc1dffcac74b1e0e93a534c76f9785b58_14758_480x0_resize_box_3.png 480w, https://cubesugarcheese.github.io/p/why-lsp/ra-code_huc1dffcac74b1e0e93a534c76f9785b58_14758_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ra-code"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>左边的（大）球是 rust-analyzer —— 一个语言服务器。
右边同样大小的球是 &lt;code>VS Code&lt;/code> —— 一个编辑器。
中心的小球是将它们粘合在一起的代码，&lt;em>包括&lt;/em> LSP 实现。&lt;/p>
&lt;p>这部分代码相较而言非常小。语言服务器或编辑器背后的代码库则十分庞大。&lt;/p>
&lt;p>如果标准理论正确，那么，在 LSP 出现之前，我们已经生活在一个某些语言在某些编辑器中具有极好的 IDE 支持的世界里。
例如，IntelliJ 之于 Java、Emacs 之于 C++、Vim 之于 C# 等等。
但我对那个时代的记忆截然不同。要想获得像样的 IDE 支持，要么使用 JetBrains 家的 IDE（IntelliJ 或 ReSharper） 所支持的语言，要么另寻他路。&lt;/p>
&lt;p>只有一个编辑器可以提供有意义的语义化 IDE 支持。&lt;/p>
&lt;h1 id="另一种说法">另一种说法&lt;/h1>
&lt;p>我想说，过去 IDE 支持如此糟糕的原因并非如此。
与其说 &lt;code>M*N&lt;/code> 太大，不如说它太小，因为 &lt;code>N&lt;/code> 是零，&lt;code>M&lt;/code> 只是略大于零。&lt;/p>
&lt;p>我会先从 &lt;code>N&lt;/code> 开始 —— 语言服务器的数量，这是我相对熟悉的方面。
在 LSP 出现之前，根本没有太多像语言服务器一样工作的东西。主要原因是构建一个语言服务器很困难。&lt;/p>
&lt;p>语言服务器本身的复杂性相当高。众所周知，编译器很复杂，而语言服务器则是编译器&lt;em>加上点其他东西&lt;/em>。&lt;/p>
&lt;p>&lt;em>首先&lt;/em>，就像编译器一样，语言服务器需要完全理解语言本身，它需要能够区分有效程序和无效程序。
然而，对于无效程序，编译器通常只是发出错误消息并立即退出，但语言服务器必须尽可能地分析&lt;em>任何&lt;/em>无效程序。
与编译器相比，处理不完整和无效的程序是语言服务器遇到的第一个复杂问题。&lt;/p>
&lt;p>&lt;em>其次&lt;/em>，虽然编译器通常只是一个将源文本转换为机器代码的单纯程序，但语言服务器必须与用户不断修改的代码库协作。
它是一个具有时间维度的编译器，而处理状态随时间的演变是编程中最困难的问题之一。&lt;/p>
&lt;p>&lt;em>第三&lt;/em>，编译器通常是为最大化吞吐量而优化的，而语言服务器的目标却是最小化延迟（同时不完全放弃吞吐量）。
添加对延迟的要求并不意味着您需要更加努力地进行优化。
相反，这通常意味着您需要彻底改变体系结构，以把延迟控制在可接受的范围内。&lt;/p>
&lt;p>而这将我们带入了与语言服务器相关的意外复杂度集群中。众所周知，如何编写编译器是个常识。
并非所有人都曾阅读过“龙书”（我没有认真阅读过解析相关章节），但人人皆知其中包含着一切答案。
因此，大多数现有编译器最终看起来都像一个典型的编译器。
而且，当编译器作者开始考虑 IDE 支持时，第一个想法可能是“嗯，IDE 有点像编译器，我们有编译器，所以问题解决了，对吧？”。
这种想法完全错误 —— IDE 内部与编译器非常不同，可是这个事实直到最近还鲜为人知。&lt;/p>
&lt;p>语言服务器是&lt;a class="link" href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/" target="_blank" rel="noopener"
>“从不重写”&lt;/a>规则的反例。
大多数备受好评的语言服务器都是编译器的重写或替代实现。
IntelliJ 和 Eclipse 都编写了自己的编译器，而不是在 IDE 中重用 javac 。
为了给 C# 提供足够 IDE 支持，微软将他们的 C# 编译器重写为交互式自托管编译器（Roslyn 项目）。
尽管 Dart 是一种从头开始、相对现代的语言，但最终却有&lt;em>三种&lt;/em>实现（主机 AOT 编译器、主机 IDE 编译器（dart-analyzer）和在设备上的 JIT 编译器）。
Rust 从两个方向展开探索 —— rustc 的增量演变（RLS）和从头开始的实现（rust-analyzer），最终 rust-analyzer 大获全胜。&lt;/p>
&lt;p>我知道的两个例外是 C++ 和 OCaml。奇怪的是，两者都需要前向声明和头文件，我不认为这是巧合。
有关详细信息，请参阅 &lt;a class="link" href="https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html" target="_blank" rel="noopener"
>响应式 IDE 的三种体系结构&lt;/a> 一文。&lt;/p>
&lt;p>总之，在语言服务器方面，事情处于一个糟糕的平衡状态。
实现语言服务器完全可能，但需要些打破传统的方法，而想要做到这一点十分困难。&lt;/p>
&lt;p>我不太确定编辑器方面发生了什么。尽管如此，我还是要声明一点，我们没有能适任 IDE 的编辑器。&lt;/p>
&lt;p>IDE 包括许多语义方面的功能。最典型的例子当然是补全。
如果要实现 &lt;code>VS Code&lt;/code> 的自定义补全，需要实现 &lt;a class="link" href="https://code.visualstudio.com/api/references/vscode-api#CompletionItemProvider" target="_blank" rel="noopener"
>CompletionItemProvider&lt;/a> 接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">CompletionItemProvider&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">provideCompletionItems&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">TextDocument&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">position&lt;/span>: &lt;span class="kt">Position&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CompletionItem&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这意味着，在 &lt;code>VS Code&lt;/code> 中，代码补全（以及数十个其他与 IDE 相关功能）是编辑器一等概念，具有统一的用户 UI 和开发者 API 。&lt;/p>
&lt;p>这与 Emacs 和 Vim 形成鲜明对比，因为它们没有合适的补全接口用于编辑器扩展。
相反，他们暴露了低级的光标和屏幕操作 API，然后人们在此基础上实现了相互冲突的补全框架！&lt;/p>
&lt;p>这还只是代码补全！还有参数信息、嵌入提示、路径导航&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>、扩展选择、辅助、符号搜索、查找用法（给我打住:)）要怎么办？&lt;/p>
&lt;p>简而言之，体面的 IDE 支持问题不在于 &lt;code>N*M&lt;/code> ，而在于双边市场不充分平衡。&lt;/p>
&lt;p>语言提供者不愿意创建语言服务器，因为这本身很难，需求又很低（等同于没有来自其他语言的竞争）。而且，即使创建了一个语言服务器，也会发现十几个编辑器完全没有准备好为智能服务器提供支持。&lt;/p>
&lt;p>从编辑器的角度来看，想要添加 IDE 支持所需的高级 API 的动机很小，因为这些 API 没有潜在提供者。&lt;/p>
&lt;h1 id="为什么-lsp-很棒">为什么 LSP 很棒&lt;/h1>
&lt;p>这就是为什么我认为 LSP 很棒！&lt;/p>
&lt;p>我不认为这是一个很大的技术创新（显然，您会想要将一个与语言无关的编辑器和一个特定于语言的服务器分开）。
我认为这是一个相当糟糕（又名“足够好”）的技术实现（请继续关注“为什么 LSP 很烂？”帖子？）。
&lt;em>但是&lt;/em>它把我们从一个语言没有对应的 IDE 很正常，甚至没有人会考虑语言服务器的世界，带到了一个如果语言没有可用的补全和转到定义的就看起来不专业的世界。&lt;/p>
&lt;p>值得注意的是，微软解决了双边市场问题，他们是两种语言（C# 和 TypeScript）和编辑器（VS Code 和 Visual Studio）的供应商，不过IDE领域通常输给了竞争对手（JetBrains）。
虽然我可能会对 LSP 的特定技术细节吹毛求疵 ，但我绝对钦佩他们在这一特定领域的战略眼光。&lt;/p>
&lt;p>他们：&lt;/p>
&lt;ul>
&lt;li>建立了一个基于 web 技术的编辑器。&lt;/li>
&lt;li>将 web 开发支持确定为与 JetBrains 竞争的一大优势（在 IDE 中支持 JS 几乎是不可能的）。&lt;/li>
&lt;li>构建了一种语言（！！！），使为 web 开发提供 IDE 支持变得可行。&lt;/li>
&lt;li>构建了一个具有前瞻性架构的 IDE 平台（请继续关注我解释为什么 vscode.d.ts 是卓越的技术杰作的帖子）。&lt;/li>
&lt;li>推出 LSP 以免费增加其平台在其他领域的价值（将整个世界推向一个明显更好的 IDE 平衡作为附带利益）。&lt;/li>
&lt;li>现在，如果我们真的不再在本地机器上编辑、构建和运行代码，code spaces 将成为“远程优先开发”的主导者。&lt;/li>
&lt;/ul>
&lt;p>不过，说实话，我仍然希望最终的赢家是 JetBrains，因为他们将 Kotlin 作为适用于任何平台的通用语言:-)
虽然微软充分利用了当今占主导地位的技术（TypeScript 和 Electron），但 JetBrains 试图自下而上地解决问题（Kotlin 和 Compose）。&lt;/p>
&lt;h1 id="关于-m--n-的更多信息">关于 &lt;code>M * N&lt;/code> 的更多信息&lt;/h1>
&lt;p>现在我要强调的是，它&lt;em>真的&lt;/em>不是 &lt;code>M*N&lt;/code>:）&lt;/p>
&lt;p>&lt;em>首先&lt;/em>，&lt;code>M*N&lt;/code> 的论点忽略了这样一个事实，即这是一个令人尴尬的平行问题。
语言设计者不需要为所有编辑器编写插件，编辑器也不需要添加对所有语言的特殊支持。
相反，一种语言应该实现一个使用某种协议的服务器，编辑器需要实现语言无关的 API 来提供补全等功能，如果语言和编辑器都并不深奥，那么对两者都感兴趣的人只需要写一点胶水代码就可以将两者绑定在一起！
rust analyzer 的 VS Code 插件有 3.2k 行代码，neovim 插件是 2.3k 行，Emacs 插件则是 1.2k 行。这三个插件都是由不同的人独立开发的。
去中心化与开源化的开发极具魅力！如果插件要支持自定义协议而不是 LSP（前提是编辑器内部支持高级 IDE API），我预期只需在上面数据的基础上添加 2k 行，而这仍然在业余爱好者的闲暇时间范围内。&lt;/p>
&lt;p>&lt;em>其次&lt;/em>，对于 &lt;code>M*N&lt;/code> 优化，您应该希望协议实现是从一些机器可读的实现中生成的。
但在最新版本之前，LSP 规范的真实来源是一个非正式的 markdown 文档。
每种语言和客户端都在想出自己的方法来从中提取协议，许多人（包括 rust-analyzer）只是手动同步更改，其中有相当多的重复。&lt;/p>
&lt;p>&lt;em>第三&lt;/em>，如果 &lt;code>M*N&lt;/code> 是一个问题，那么每个编辑器应该只能看到一个 LSP 实现。但事实上，LSP 在 Emacs 上有两种相互竞争的实现（lsp-mode 和 eglot）。
我不骗你，rust analyzer 手册中包含了与 vim 的 6 个不同 LSP 客户端集成的说明。
呼应第一点，这是开源的！工作量的总量几乎无关紧要，重要的是完成任务的协调程度。&lt;/p>
&lt;p>&lt;em>第四&lt;/em>，微软本身并没有试图利用 &lt;code>M+N&lt;/code> 。&lt;code>VS Code&lt;/code>中&lt;em>没有&lt;/em>通用的 LSP 实现。
相反，每种语言都需要有一个具有完全独立 LSP 实现的专用插件。&lt;/p>
&lt;h1 id="我呼吁">我呼吁&lt;/h1>
&lt;ul>
&lt;li>每个人&lt;/li>
&lt;/ul>
&lt;p>请索求更好的 IDE 支持！
我认为今天我们已经跨过了 IDE 支持的一般可用性的门槛，但除了基本功能之外，我们还可以做很多事情。
在理想的情况下，应该可以使用今天可以用于检查编辑器缓冲区内容的相同简单的 API 来检查光标处表达式的每个小语义细节。&lt;/p>
&lt;ul>
&lt;li>文本编辑器作者&lt;/li>
&lt;/ul>
&lt;p>留意 &lt;code>VS Code&lt;/code> 的架构。虽然 electron 提供的用户体验值得商榷，但其内部架构中却蕴含有许多智慧。编辑器的 API 着眼于与显示方式无关的高级特性。
基本的 IDE 功能应该是一流的扩展点，它不应该被每个插件的作者重新发明。特别是，&lt;a class="link" href="https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html" target="_blank" rel="noopener"
>辅助/代码操作/💡&lt;/a> 已经成为一流的用户体验的概念。
这是 IDE 唯一也是最重要的在改善用户体验上的创新。尽管已经出现很久了，但这并不是所有编辑器的标准接口，我感到非常荒谬。&lt;/p>
&lt;p>但不要把 LSP &lt;em>本身&lt;/em>作为一流的概念。
令人惊讶的是，VSCode 对 LSP &lt;em>一无所知&lt;/em>。它只提供了一系列扩展点，而丝毫不关心它们是如何实现的。
LSP 实现只是一个库，由特定于语言的插件使用。例如，&lt;code>VS Code&lt;/code> 的 Rust 和 C++ 扩展在运行时不共享相同的 LSP 实现，使得内存中有两个 LSP 库的副本！&lt;/p>
&lt;p>此外，尝试利用开源的力量。
不要强制集中所有 LSP 实现！让不同的人可以独立地为您的编辑器提供完美的 Go 支持和完美的 Rust 支持。&lt;code>VS Code&lt;/code> 是一个可能的模范，它具有市场和分布式、独立的插件。
不过，只要语言能有独立的维护者，将工作组织成一个共享的 仓库/源代码 树或许是可行的。&lt;/p>
&lt;ul>
&lt;li>语言服务器作者&lt;/li>
&lt;/ul>
&lt;p>你们做得很好！所有语言的 IDE 支持质量都在迅速提高，尽管我觉得这不过是一条漫长道路的开端。
需要记住一点，LSP 是&lt;em>一个&lt;/em>关于语言语义信息的接口，但它并不&lt;em>唯一&lt;/em>，也许会有更好的东西出现。
即使在今天，LSP 的局限性也阻碍了很多实用功能推出。因此，请尝试将 LSP 视为序列化格式，而不是内部数据模型。
同时，尝试写更多关于如何实现语言服务器的内容————我觉得这方面的知识依然不够。&lt;/p>
&lt;p>以上！&lt;/p>
&lt;p>附言：如果您有机会从使用 rust-analyzer 中受益，请考虑赞助&lt;a class="link" href="https://opencollective.com/rust-analyzer" target="_blank" rel="noopener"
>Ferrous Systems Open Source Collective for rust analyzer&lt;/a>，以支持其开发！&lt;/p>
&lt;h1 id="翻译信息">翻译信息&lt;/h1>
&lt;p>本文翻译自 (&lt;a class="link" href="https://matklad.github.io/2022/04/25/why-lsp.html#Why-LSP" target="_blank" rel="noopener"
>https://matklad.github.io/2022/04/25/why-lsp.html#Why-LSP&lt;/a>)&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>译注：细腰（thin waist）是一种对用于解决计算机系统中互操作问题的概念或是接口的比喻说法。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA" target="_blank" rel="noopener"
>https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%8C%85%E5%B1%91%E5%AF%BC%E8%88%AA&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>